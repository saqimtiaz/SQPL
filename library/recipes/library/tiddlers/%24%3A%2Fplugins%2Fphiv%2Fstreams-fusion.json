{"created":"20210721002314248","version":"0.0.13-beta","type":"application/json","title":"$:/plugins/phiv/streams-fusion","source":"https://fastfreddy.gitlab.io/streams-fusion/","plugin-type":"plugin","name":"Streams Fusion","modified":"20220410224429120","list":"readme changelog license","description":"Streams-fusion - a streams addon to merge streams tiddlers","dependents":"$:/plugins/sq/streams $:/plugins/flibbles/relink","core-version":">=5.1.23","author":"Fred D","text":"{\n    \"tiddlers\": {\n        \"$:/config/sq/streams-fusion/editmode\": {\n            \"created\": \"20210725205558549\",\n            \"text\": \"no\",\n            \"title\": \"$:/config/sq/streams-fusion/editmode\",\n            \"tags\": \"\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/input-switch\",\n            \"settings-group\": \"z-streams-fusion\",\n            \"modified\": \"20211123024000450\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-editmode-description}}\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-editmode-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/fused-tiddler-title\": {\n            \"created\": \"20210725115439961\",\n            \"text\": \"<<currentTiddler>>_fused\",\n            \"title\": \"$:/config/sq/streams-fusion/fused-tiddler-title\",\n            \"tags\": \"\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/input\",\n            \"settings-group\": \"z-streams-fusion\",\n            \"modified\": \"20210730021557160\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-titletemplate-description}}\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-titletemplate-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/listformat\": {\n            \"created\": \"20210726104706258\",\n            \"title\": \"$:/config/sq/streams-fusion/listformat\",\n            \"text\": \"*\",\n            \"value-yes\": \"p\",\n            \"value-no\": \"*\",\n            \"value-neutral\": \"#\",\n            \"tags\": \"\",\n            \"short-caption-yes\": \"{{$:/plugins/phiv/streams-fusion/language##settings-listformat-short-caption-yes}}\",\n            \"short-caption-no\": \"{{$:/plugins/phiv/streams-fusion/language##settings-listformat-short-caption-no}}\",\n            \"short-caption-neutral\": \"{{$:/plugins/phiv/streams-fusion/language##settings-listformat-short-caption-neutral}}\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/select\",\n            \"settings-group\": \"z-streams-fusion\",\n            \"option-values\": \"* # p\",\n            \"option-names\": \"bullets numbers paragraphs\",\n            \"modified\": \"20211201001030631\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-listformat-description}}\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-listformat-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/outputformat\": {\n            \"created\": \"20210728010110712\",\n            \"text\": \"wikitext\",\n            \"title\": \"$:/config/sq/streams-fusion/outputformat\",\n            \"value-yes\": \"markdown\",\n            \"value-no\": \"wikitext\",\n            \"value-neutral\": \"html\",\n            \"tags\": \"\",\n            \"short-caption-yes\": \"{{$:/plugins/phiv/streams-fusion/language##settings-outputformat-short-caption-yes}}\",\n            \"short-caption-no\": \"{{$:/plugins/phiv/streams-fusion/language##settings-outputformat-short-caption-no}}\",\n            \"short-caption-neutral\": \"{{$:/plugins/phiv/streams-fusion/language##settings-outputformat-short-caption-neutral}}\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/select\",\n            \"settings-group\": \"z-streams-fusion\",\n            \"option-values\": \"html wikitext markdown\",\n            \"option-names\": \"html wikitext markdown\",\n            \"modified\": \"20220410222739869\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-outputformat-description}}\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-outputformat-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/turndown/bullets\": {\n            \"text\": \"*\",\n            \"title\": \"$:/config/sq/streams-fusion/turndown/bullets\",\n            \"tags\": \"\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/select\",\n            \"settings-group\": \"zz-streams-fusion-turndown\",\n            \"option-values\": \"* + -\",\n            \"option-names\": \"* + -\",\n            \"modified\": \"20211124025559161\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-bullets-description}}\",\n            \"created\": \"20211124005811291\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-bullets-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/turndown/codeBlockStyle\": {\n            \"text\": \"indented\",\n            \"title\": \"$:/config/sq/streams-fusion/turndown/codeBlockStyle\",\n            \"tags\": \"\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/select\",\n            \"settings-group\": \"zz-streams-fusion-turndown\",\n            \"option-values\": \"fenced indented\",\n            \"option-names\": \"fenced indented\",\n            \"modified\": \"20211124025556038\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-codeBlockStyle-description}}\",\n            \"created\": \"20211124011036286\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-codeBlockStyle-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/turndown/emDelimiter\": {\n            \"text\": \"*\",\n            \"title\": \"$:/config/sq/streams-fusion/turndown/emDelimiter\",\n            \"tags\": \"\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/select\",\n            \"settings-group\": \"zz-streams-fusion-turndown\",\n            \"option-values\": \"_ *\",\n            \"option-names\": \"_ *\",\n            \"modified\": \"20211124031824656\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-emDelimiter-description}}\",\n            \"created\": \"20211124025746383\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-emDelimiter-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/turndown/fence\": {\n            \"text\": \"~~~\",\n            \"title\": \"$:/config/sq/streams-fusion/turndown/fence\",\n            \"tags\": \"\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/select\",\n            \"settings-group\": \"zz-streams-fusion-turndown\",\n            \"option-values\": \"``` ~~~\",\n            \"option-names\": \"``` ~~~\",\n            \"modified\": \"20211124025450297\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-fence-description}}\",\n            \"created\": \"20211124010658084\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-fence-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/turndown/headingStyle\": {\n            \"text\": \"setext\",\n            \"title\": \"$:/config/sq/streams-fusion/turndown/headingStyle\",\n            \"tags\": \"\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/select\",\n            \"settings-group\": \"zz-streams-fusion-turndown\",\n            \"option-values\": \"setext atx\",\n            \"option-names\": \"setext atx\",\n            \"modified\": \"20211124025720399\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-headingStyle-description}}\",\n            \"created\": \"20211124025649993\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-headingStyle-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/turndown/horizontalRule\": {\n            \"text\": \"- - -\",\n            \"title\": \"$:/config/sq/streams-fusion/turndown/horizontalRule\",\n            \"tags\": \"\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/select\",\n            \"settings-group\": \"zz-streams-fusion-turndown\",\n            \"option-values\": \"[[* * *]] [[- - -]] [[_ _ _]]\",\n            \"option-names\": \"*** --- ___\",\n            \"modified\": \"20211124005138464\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-hr-description}}\",\n            \"created\": \"20211124004411162\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-hr-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/turndown/linkReferenceStyle\": {\n            \"text\": \"full\",\n            \"title\": \"$:/config/sq/streams-fusion/turndown/linkReferenceStyle\",\n            \"tags\": \"\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/select\",\n            \"settings-group\": \"zz-streams-fusion-turndown\",\n            \"option-values\": \"full collapsed shortcut\",\n            \"option-names\": \"full collapsed shortcut\",\n            \"modified\": \"20211124030503629\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-linkReferenceStyle-description}}\",\n            \"created\": \"20211124030404890\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-linkReferenceStyle-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/turndown/linkStyle\": {\n            \"text\": \"inlined\",\n            \"title\": \"$:/config/sq/streams-fusion/turndown/linkStyle\",\n            \"tags\": \"\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/select\",\n            \"settings-group\": \"zz-streams-fusion-turndown\",\n            \"option-values\": \"inlined referenced\",\n            \"option-names\": \"inlined referenced\",\n            \"modified\": \"20211124030400127\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-linkStyle-description}}\",\n            \"created\": \"20211124030315777\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-linkStyle-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/turndown/preformattedCode\": {\n            \"created\": \"20211130012108995\",\n            \"text\": \"true\",\n            \"title\": \"$:/config/sq/streams-fusion/turndown/preformattedCode\",\n            \"tags\": \"\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/select\",\n            \"settings-group\": \"zz-streams-fusion-turndown\",\n            \"option-values\": \"true false\",\n            \"option-names\": \"true false\",\n            \"modified\": \"20211130012441272\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-preformattedCode-description}}\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-preformattedCode-caption}}\"\n        },\n        \"$:/config/sq/streams-fusion/turndown/strongDelimiter\": {\n            \"text\": \"**\",\n            \"title\": \"$:/config/sq/streams-fusion/turndown/strongDelimiter\",\n            \"tags\": \"\",\n            \"settings-template\": \"$:/plugins/sq/streams/ui/templates/settings/select\",\n            \"settings-group\": \"zz-streams-fusion-turndown\",\n            \"option-values\": \"__ **\",\n            \"option-names\": \"__ **\",\n            \"modified\": \"20211124031823069\",\n            \"description\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-strongDelimiter-description}}\",\n            \"created\": \"20211124030232688\",\n            \"caption\": \"{{$:/plugins/phiv/streams-fusion/language##settings-turndown-strongDelimiter-caption}}\"\n        },\n        \"$:/plugins/phiv/streams-fusion/button.png\": {\n            \"created\": \"20211123023941760\",\n            \"text\": \"\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/button.png\",\n            \"type\": \"image/png\",\n            \"modified\": \"20211123023943084\"\n        },\n        \"$:/plugins/phiv/streams-fusion/changelog\": {\n            \"created\": \"20210721002238986\",\n            \"text\": \"|!version|!release date|!major changes|\\n|0.0.13-beta|10 April 2022|fixed incorrect variable name in $:/plugins/phiv/streams-fusion/macros (\\\"lb\\\" => \\\"linebreak\\\") |\\n|0.0.12-beta|10 April 2022|fixed incorrect parameter name in $:/plugins/phiv/streams-fusion/macros (\\\"bullets\\\" => \\\"bulletListMarker\\\") |\\n|0.0.11-beta|30 November 2021|improved overwrite tiddler to set the tiddler type according to the output format|\\n|0.0.10-beta|30 November 2021|fixed issue reading list format settings|\\n|0.0.9-beta|29 November 2021|added export to markdown<br/>added paragraph-based flattening<br/>fixed issue with branch fusion of leaf without subordinate nodes|\\n|0.0.8-beta|30 July 2021|improved overwrite handling from context menu; documentation fix; <br/>changed editmode default to no|\\n|0.0.7-beta|30 July 2021|bugfix cleaning nodes when overwriting|\\n|0.0.6-beta|30 July 2021|UI overhaul including quick settings in context menu; code overhaul;<br/>fixed logic error in action sequence when overwriting stream; fixed changelog years|\\n|0.0.5-beta|24 July 2021|added raw html export, added plugin icon|\\n|0.0.4-beta|24 July 2021|extracted language strings into single language tiddler to simplify internationalization|\\n|0.0.3-beta|22 July 2021|fixed popup position, new menu options to overwrite|\\n|0.0.2-beta|21 July 2021|fixed typos, new icon, removed workaround for older Streams plugin versions|\\n|0.0.1-beta|21 July 2021|initial release|\\n\\n\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/changelog\",\n            \"tags\": \"\",\n            \"modified\": \"20220410224016656\"\n        },\n        \"$:/plugins/phiv/streams-fusion/context-menu.png\": {\n            \"title\": \"$:/plugins/phiv/streams-fusion/context-menu.png\",\n            \"text\": \"\",\n            \"type\": \"image/png\"\n        },\n        \"$:/plugins/phiv/streams-fusion/contextmenu/clipboard\": {\n            \"created\": \"20210723014506483\",\n            \"text\": \"\\\\import $:/plugins/phiv/streams-fusion/macros $:/plugins/sq/streams/contextmenu/contextmenu-template\\n\\\\define fuse-export() <$macrocall $name=\\\"stream-export\\\" tiddler=\\\"$(currentTiddler)$\\\" separator=\\\"$(separator)$\\\" />\\n\\n<!-- this first list filter is necessary to avoid error-causing tiddler rendering outside of the context menu action -->\\n<$list filter=\\\"[all[current]has[parent]]\\\" variable=\\\"ignore\\\">\\n\\t<<fuse-handler \\\"clipboard\\\">>\\n</$list>\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/contextmenu/clipboard\",\n            \"tags\": \"$:/tags/streams/contextmenu $:/tags/streams/keyboard-shortcuts\",\n            \"sq-contextmenu-name\": \"{{$:/plugins/phiv/streams-fusion/language##contextmenu-clipboard}}\",\n            \"revision\": \"0\",\n            \"modified\": \"20211123022728204\",\n            \"key\": \"Ctrl+Alt+C\",\n            \"bag\": \"default\",\n            \"list-after\": \"$:/plugins/phiv/streams-fusion/contextmenu/overwrite\"\n        },\n        \"$:/plugins/phiv/streams-fusion/contextmenu/new\": {\n            \"created\": \"20200706164134654\",\n            \"text\": \"\\\\import $:/plugins/phiv/streams-fusion/macros $:/plugins/sq/streams/contextmenu/contextmenu-template\\n\\\\define fuse-export() <$macrocall $name=\\\"stream-export\\\" tiddler=\\\"$(currentTiddler)$\\\" separator=\\\"$(separator)$\\\" />\\n\\n<!-- this first list filter is necessary to avoid call stack error when rendering outside of a context menu action! -->\\n<$list filter=\\\"[all[current]has[parent]]\\\" variable=\\\"ignore\\\">\\n\\t<$wikify name=\\\"export-name\\\" text={{$:/config/sq/streams-fusion/fused-tiddler-title!!text}} >\\n\\t\\t<<fuse-handler \\\"new\\\">>\\n\\t</$wikify>\\n</$list>\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/contextmenu/new\",\n            \"tags\": \"$:/tags/streams/contextmenu $:/tags/streams/keyboard-shortcuts\",\n            \"sq-contextmenu-name\": \"{{$:/plugins/phiv/streams-fusion/language##contextmenu-new}}\",\n            \"revision\": \"0\",\n            \"modified\": \"20211123022715003\",\n            \"key\": \"Ctrl+Shift+F\",\n            \"bag\": \"default\"\n        },\n        \"$:/plugins/phiv/streams-fusion/contextmenu/overwrite\": {\n            \"created\": \"20210723020326047\",\n            \"text\": \"\\\\import $:/plugins/phiv/streams-fusion/macros $:/plugins/sq/streams/contextmenu/contextmenu-template $:/plugins/sq/streams/delete-hook/actions\\n\\\\define fuse-export() <$macrocall $name=\\\"stream-export\\\" tiddler=\\\"$(currentTiddler)$\\\" separator=\\\"$(separator)$\\\" />\\n\\n<!-- this first list filter is necessary to avoid error-causing tiddler rendering outside of the context menu action -->\\n\\n<$list filter=\\\"[all[current]has[parent]]\\\" variable=\\\"ignore\\\">\\n\\t<$vars target=<<currentTiddler>> >\\n\\t\\t<!-- if currentTiddler is in edit mode, exit edit mode -->\\n\\t\\t<$list filter=\\\"[<row-edit-state>get[text]else[]match<currentTiddler>]\\\" variable=\\\"NULL\\\">\\n\\t\\t\\t<$action-deletetiddler $tiddler=<<row-edit-state>> />\\n\\t\\t</$list>\\n\\n\\t\\t<<fuse-handler \\\"overwrite\\\">>\\n\\t</$vars>\\n</$list>\",\n            \"bag\": \"default\",\n            \"revision\": \"2\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/contextmenu/overwrite\",\n            \"tags\": \"$:/tags/streams/contextmenu $:/tags/streams/keyboard-shortcuts\",\n            \"sq-contextmenu-name\": \"{{$:/plugins/phiv/streams-fusion/language##contextmenu-overwrite}}\",\n            \"modified\": \"20211123022658704\",\n            \"list-after\": \"$:/plugins/phiv/streams-fusion/contextmenu/new\",\n            \"key\": \"Ctrl+Shift+O\"\n        },\n        \"$:/plugins/phiv/streams-fusion/fuse-button\": {\n            \"created\": \"20210307211728499\",\n            \"text\": \"\\\\import $:/plugins/phiv/streams-fusion/macros $:/plugins/sq/streams/contextmenu/contextmenu-template $:/plugins/sq/streams/delete-hook/actions\\n\\n\\\\define menu-item(title,subtitle:\\\"\\\",actions:\\\"\\\")\\n\\t\\t<$button class=\\\"tc-menu-list-item tc-btn-invisible\\\" actions=<<__actions__>> >\\n\\t\\t\\t<span class=\\\"sq-contextmenu-itemwrapper\\\">\\n\\t\\t\\t\\t<span class=\\\"sq-contextmenu-itemtext\\\" style=\\\"font-weight: bold;\\\">$title$</span>\\n\\t\\t\\t</span>\\n\\t\\t</$button>\\n\\\\end\\n\\n\\\\define fuse-export() <$macrocall $name=\\\"stream-export\\\" tiddler=\\\"$(storyTiddler)$\\\" separator=\\\"$(separator)$\\\" />\\n\\n<$list filter=\\\"[<storyTiddler>has[stream-list]]\\\">\\n<$vars fuse-menu-state=<<qualify \\\"$:/state/fuse-popup\\\">> target=<<storyTiddler>> >\\n    <$button class=\\\"tc-btn-invisible szen-streams-btn\\\" popup=<<fuse-menu-state>> >\\n        {{$:/plugins/phiv/streams-fusion/fuse-button!!icon}}\\n    </$button>\\n        <$reveal type=\\\"popup\\\" state=<<fuse-menu-state>> position=\\\"aboveright\\\" tag=\\\"div\\\">\\n        \\t<div class=\\\"tc-drop-down sq-contextmenu\\\">\\n\\t\\t\\t\\t<$wikify name=\\\"export-name\\\" text={{$:/config/sq/streams-fusion/fused-tiddler-title!!text}} >\\n\\t\\t\\t\\t\\t<$macrocall $name=\\\"menu-item\\\" title={{$:/plugins/phiv/streams-fusion/language##contextmenu-new}} actions=<<fuse-handler \\\"new\\\">> />\\n\\t\\t\\t\\t\\t<$macrocall $name=\\\"menu-item\\\" title={{$:/plugins/phiv/streams-fusion/language##contextmenu-overwrite}} actions=<<fuse-handler \\\"overwrite\\\">> />\\n\\t\\t\\t\\t\\t<$macrocall $name=\\\"menu-item\\\" title={{$:/plugins/phiv/streams-fusion/language##contextmenu-clipboard}} actions=<<fuse-handler \\\"clipboard\\\">> />\\n\\t\\t\\t\\t\\t<<menu-divider>>\\n\\t\\t\\t\\t\\t<span class=\\\"tc-popup-keep\\\" style=\\\"min-width:fit-content\\\">\\n\\t\\t\\t\\t\\t\\t&nbsp;&nbsp;<$link to=\\\"$:/plugins/sq/streams/Settings/config\\\">Quick settings :</$link>\\n\\t\\t\\t\\t\\t\\t\\t<table><tr><th>list format</th><th>output</th></tr><tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>{{$:/config/sq/streams-fusion/listformat||$:/plugins/phiv/streams-fusion/ui/templates/settings/menu-radio}}</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>{{$:/config/sq/streams-fusion/outputformat||$:/plugins/phiv/streams-fusion/ui/templates/settings/menu-radio}}</td>\\n\\t\\t\\t\\t\\t\\t\\t</tr></table>\\n\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t</$wikify>\\n        \\t</div>\\n        </$reveal>\\n</$vars>\\n</$list>\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/fuse-button\",\n            \"tags\": \"$:/tags/streams/root-buttons\",\n            \"revision\": \"2\",\n            \"modified\": \"20211123012441532\",\n            \"icon\": \"<svg version=\\\"1.0\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"  width=\\\"64.000000pt\\\" height=\\\"64.000000pt\\\" viewBox=\\\"0 0 64.000000 64.000000\\\"  preserveAspectRatio=\\\"xMidYMid meet\\\">  <g transform=\\\"translate(0.000000,64.000000) scale(0.100000,-0.100000)\\\" fill=\\\"#000000\\\" stroke=\\\"none\\\"> <path d=\\\"M116 558 c-20 -28 -20 -48 0 -76 20 -28 68 -29 91 -2 27 31 38 25 67 -35 18 -38 37 -62 61 -76 19 -12 32 -25 29 -30 -3 -5 -59 -9 -124 -9 -110 0 -119 1 -125 20 -13 41 -81 39 -105 -3 -13 -24 -13 -30 0 -54 24 -42 92 -44 105 -3 6 19 15 20 125 20 65 0 121 -4 125 -10 3 -5 -8 -16 -25 -25 -32 -16 -43 -43 -12 -29 9 4 50 9 90 12 69 4 72 3 72 -18 0 -16 4 -20 16 -16 24 9 134 88 134 96 0 8 -131 100 -143 100 -4 0 -7 -9 -7 -20 0 -18 -6 -20 -62 -19 -35 0 -71 4 -81 8 -10 4 -33 34 -50 66 -18 33 -42 64 -54 70 -13 5 -23 13 -23 17 0 3 -7 14 -16 22 -23 24 -70 20 -88 -6z m65 -8 c38 -21 12 -79 -31 -65 -22 7 -27 44 -8 63 15 15 15 15 39 2z m419 -230 c0 -13 -79 -59 -85 -50 -3 5 -33 10 -66 10 l-59 0 0 40 0 40 59 0 c33 0 63 5 66 10 6 9 85 -37 85 -50z m-519 30 c23 -13 25 -43 3 -61 -31 -26 -70 25 -44 56 15 18 16 18 41 5z\\\"/> <path d=\\\"M280 200 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\\\"/> <path d=\\\"M116 158 c-20 -28 -20 -48 0 -76 10 -14 26 -22 44 -22 28 0 60 22 60 41 0 5 6 9 13 9 16 0 53 38 45 46 -4 3 -15 0 -27 -8 -18 -11 -23 -10 -41 10 -27 29 -74 29 -94 0z m65 -8 c38 -21 12 -79 -31 -65 -22 7 -27 44 -8 63 15 15 15 15 39 2z\\\"/> </g> </svg>\",\n            \"bag\": \"default\"\n        },\n        \"$:/plugins/phiv/streams-fusion/icon\": {\n            \"created\": \"20210725035238143\",\n            \"text\": \"<svg version=\\\"1.0\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"  width=\\\"64.000000pt\\\" height=\\\"64.000000pt\\\" viewBox=\\\"0 0 64.000000 64.000000\\\"  preserveAspectRatio=\\\"xMidYMid meet\\\">  <g transform=\\\"translate(0.000000,64.000000) scale(0.100000,-0.100000)\\\" fill=\\\"#000000\\\" stroke=\\\"none\\\"> <path d=\\\"M116 558 c-20 -28 -20 -48 0 -76 20 -28 68 -29 91 -2 27 31 38 25 67 -35 18 -38 37 -62 61 -76 19 -12 32 -25 29 -30 -3 -5 -59 -9 -124 -9 -110 0 -119 1 -125 20 -13 41 -81 39 -105 -3 -13 -24 -13 -30 0 -54 24 -42 92 -44 105 -3 6 19 15 20 125 20 65 0 121 -4 125 -10 3 -5 -8 -16 -25 -25 -32 -16 -43 -43 -12 -29 9 4 50 9 90 12 69 4 72 3 72 -18 0 -16 4 -20 16 -16 24 9 134 88 134 96 0 8 -131 100 -143 100 -4 0 -7 -9 -7 -20 0 -18 -6 -20 -62 -19 -35 0 -71 4 -81 8 -10 4 -33 34 -50 66 -18 33 -42 64 -54 70 -13 5 -23 13 -23 17 0 3 -7 14 -16 22 -23 24 -70 20 -88 -6z m65 -8 c38 -21 12 -79 -31 -65 -22 7 -27 44 -8 63 15 15 15 15 39 2z m419 -230 c0 -13 -79 -59 -85 -50 -3 5 -33 10 -66 10 l-59 0 0 40 0 40 59 0 c33 0 63 5 66 10 6 9 85 -37 85 -50z m-519 30 c23 -13 25 -43 3 -61 -31 -26 -70 25 -44 56 15 18 16 18 41 5z\\\"/> <path d=\\\"M280 200 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\\\"/> <path d=\\\"M116 158 c-20 -28 -20 -48 0 -76 10 -14 26 -22 44 -22 28 0 60 22 60 41 0 5 6 9 13 9 16 0 53 38 45 46 -4 3 -15 0 -27 -8 -18 -11 -23 -10 -41 10 -27 29 -74 29 -94 0z m65 -8 c38 -21 12 -79 -31 -65 -22 7 -27 44 -8 63 15 15 15 15 39 2z\\\"/> </g> </svg>\",\n            \"tags\": \"\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/icon\",\n            \"modified\": \"20210725035300650\",\n            \"type\": \"image/svg+xml\"\n        },\n        \"$:/plugins/phiv/streams-fusion/language\": {\n            \"created\": \"20210724231507184\",\n            \"text\": \"overwrite-warning-message:ARE YOU SURE? This will replace your stream. Always best to try with a new tiddler first!\\ncontextmenu-new: ... fuse to new tiddler\\ncontextmenu-overwrite: ... fuse and overwrite\\ncontextmenu-clipboard: ... fuse to clipboard\\nsettings-listformat-caption:Streams-fusion: set the list format\\nsettings-listformat-description; configures list format to be an unordered list (•), ordered list (#) or a simple set of paragraphs (<p>)\\nsettings-listformat-short-caption-no:bullets (•)\\nsettings-listformat-short-caption-neutral:numbers (#)\\nsettings-listformat-short-caption-yes:paragraphs\\nsettings-outputformat-caption:Streams-fusion: set the output format\\nsettings-outputformat-description:fuse the tree (or branch) into wikitext, raw HTML or markdown\\nsettings-outputformat-short-caption-no:wikitext\\nsettings-outputformat-short-caption-neutral:raw HTML\\nsettings-outputformat-short-caption-yes:markdown\\nsettings-editmode-caption:Streams-fusion: open fused tiddler in edit mode\\nsettings-editmode-description:After fusion, the resulting tiddler will be open in edit mode\\nsettings-titletemplate-caption:Streams-fusion: Template for fused tiddlers' titles\\nsettings-titletemplate-description:When fusing into a new tiddler, the title will follow this pattern (wikitext acceptable)\\nsettings-turndown-headingStyle-caption:Streams-fusion: Turndown heading style\\nsettings-turndown-headingStyle-description:Markdown preference to represent headings\\nsettings-turndown-hr-caption:Streams-fusion: Turndown horizontal rule\\nsettings-turndown-hr-description:Markdown preference to represent horizontal rules\\nsettings-turndown-bullets-caption:Streams-fusion: Turndown bullets\\nsettings-turndown-bullets-description:Markdown preference to represent bullets\\nsettings-turndown-codeBlockStyle-caption:Streams-fusion: Turndown code bock style\\nsettings-turndown-codeBlockStyle-description:Markdown preference to represent code blocks\\nsettings-turndown-fence-caption:Streams-fusion: Turndown fence sequence\\nsettings-turndown-fence-description:Markdown preference for fencing character sequence\\nsettings-turndown-emDelimiter-caption:Streams-fusion: Turndown emphasis delimiter\\nsettings-turndown-emDelimiter-description:Markdown preference for the emphasis delimiter\\nsettings-turndown-strongDelimiter-caption:Streams-fusion: Turndown strong delimiter\\nsettings-turndown-strongDelimiter-description:Markdown preference for the strong delimiter\\nsettings-turndown-linkStyle-caption:Streams-fusion: Turndown link style\\nsettings-turndown-linkStyle-description:Markdown link style preference\\nsettings-turndown-linkReferenceStyle-caption:Streams-fusion: Turndown link reference style\\nsettings-turndown-linkReferenceStyle-description:Markdown link reference style preference\\nsettings-turndown-preformattedCode-caption:Streams-fusion: Turndown inline preformatted code support\\nsettings-turndown-preformattedCode-description:Markdown inline preformatted code support\",\n            \"type\": \"application/x-tiddler-dictionary\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/language\",\n            \"tags\": \"\",\n            \"modified\": \"20211130125513112\"\n        },\n        \"$:/plugins/phiv/streams-fusion/license\": {\n            \"created\": \"20210721112948746\",\n            \"text\": \"Streams-fusion addon for Tiddlywiki5\\n\\nCopyright (c) 2021 Frédéric Demers\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\",\n            \"tags\": \"\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/license\",\n            \"modified\": \"20210721113043257\"\n        },\n        \"$:/plugins/phiv/streams-fusion/macros\": {\n            \"created\": \"20210720010520086\",\n            \"text\": \"\\\\define pattern() (</[^>]+>)\\n\\\\define formatter() $1$(linebreak)$\\n\\n\\\\define export-row(start_depth:\\\"\\\", separator:\\\"\\\")\\n\\\\whitespace trim\\n<$vars linebreak=\\\"\\n\\\" start_depth=\\\"$start_depth$\\\" separator=\\\"$separator$\\\" complexnodepattern=\\\"\\\\n|^!\\\">\\n\\t<$set name=\\\"depth\\\" filter=\\\"[<currentTiddler>get-stream-root:includeall[]count[]subtract<start_depth>]\\\">\\n\\t\\t<$set name=\\\"bullets\\\" filter=\\\"[[*]pad<depth>,<separator>removesuffix[*]addsuffix[ ]]\\\" select=\\\"0\\\">\\n    \\t\\t<$set name=\\\"prewrap\\\" filter=\\\"[<currentTiddler>regexp:text<complexnodepattern>then[<div>]addsuffix<linebreak>addsuffix<linebreak>]\\\" select=\\\"0\\\">\\n    \\t\\t\\t<$set name=\\\"postwrap\\\" filter=\\\"[<currentTiddler>regexp:text<complexnodepattern>then[</div>]addsuffix<linebreak>]\\\" select=\\\"0\\\">\\n\\t\\t\\t\\t\\t<$set name=\\\"regular\\\" filter=\\\"[<currentTiddler>get[text]addprefix<prewrap>addprefix<bullets>addsuffix<linebreak>addsuffix<postwrap>]\\\" select=\\\"0\\\">\\n\\t\\t\\t\\t\\t\\t<$set name=\\\"paragraphs\\\" filter=\\\"[<currentTiddler>get[text]addsuffix<linebreak>addsuffix<linebreak>]\\\" select=\\\"0\\\">\\n\\t\\t\\t\\t\\t\\t\\t<$list filter=\\\"[<separator>match[p]then<paragraphs>else<regular>]\\\" select=\\\"0\\\" variable=\\\"nodetext\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<$text text=<<nodetext>> />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<$list filter=\\\"[<currentTiddler>has[stream-list]]\\\" variable=\\\"_NULL\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<$list filter=\\\"[enlist{!!stream-list}is[tiddler]]\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<$macrocall $name=\\\"export-row\\\" start_depth=\\\"$start_depth$\\\" separator=\\\"$separator$\\\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t\\t\\t</$set>\\n\\t\\t\\t\\t\\t</$set>\\n\\t\\t\\t\\t</$set>\\n\\t\\t\\t</$set>\\n\\t\\t</$set>\\n\\t</$set>\\n</$vars>\\n\\\\end\\n\\n\\\\define stream-export(tiddler:\\\"\\\", separator:\\\"\\\")\\n\\\\whitespace trim\\n    <$vars linebreak=\\\"\\n\\\" currentTiddler=\\\"$tiddler$\\\" separator=\\\"$separator$\\\">\\n        <$set name=\\\"start_depth\\\" filter=\\\"[<currentTiddler>get-stream-root:includeall[]count[]subtract[1]]\\\">\\n        <$list filter=\\\"[<currentTiddler>has[text]]\\\">\\n\\t\\t\\t<$set name=\\\"rootcontent\\\" filter=\\\"[<currentTiddler>get[text]addsuffix<linebreak>addsuffix<linebreak>]\\\" select=\\\"0\\\">\\n\\t\\t\\t\\t<$text text=<<rootcontent>> />\\n\\t\\t\\t</$set>\\n        </$list>\\n        <$list filter=\\\"[enlist{!!stream-list}is[tiddler]]\\\">\\n\\t\\t\\t<$macrocall $name=\\\"export-row\\\" start_depth=<<start_depth>> separator=<<separator>> />\\n        </$list>\\n    </$set>\\n</$vars>\\n\\\\end\\n\\n\\n\\\\define toMarkdown()\\n        <$vars headingStyle={{$:/config/sq/streams-fusion/turndown/headingStyle!!text}}\\n                hr={{$:/config/sq/streams-fusion/turndown/horizontalRule!!text}}\\n                bullets={{$:/config/sq/streams-fusion/turndown/bullets!!text}}\\n                codeBlockStyle={{$:/config/sq/streams-fusion/turndown/codeBlockStyle!!text}}\\n                fence={{$:/config/sq/streams-fusion/turndown/fence!!text}}\\n                emDelimiter={{$:/config/sq/streams-fusion/turndown/emDelimiter!!text}}\\n                strongDelimiter={{$:/config/sq/streams-fusion/turndown/strongDelimiter!!text}}\\n                linkStyle={{$:/config/sq/streams-fusion/turndown/linkStyle!!text}}\\n                linkReferenceStyle={{$:/config/sq/streams-fusion/turndown/linkReferenceStyle!!text}}>\\n\\n                <$macrocall $name=\\\"turndown\\\" html=\\\"\\\"\\\"$(htmloutput)$\\\"\\\"\\\" headingStyle=<<headingStyle>> bulletListMarker=<<bullets>> hr=<<hr>> codeBlockStyle=<<codeBlockStyle>>  fence=<<fence>> emDelimiter=<<emDelimiter>>  strongDelimiter=<<strongDelimiter>> linkStyle=<<linkStyle>> linkReferenceStyle=<<linkReferenceStyle>> />\\n        </$vars>\\n\\\\end\\n\\n\\n\\\\define fuse-handler(action:\\\"new\\\", type:\\\"tree\\\")\\n<$vars separator={{$:/config/sq/streams-fusion/listformat!!text}}\\n    outputformat-config={{$:/config/sq/streams-fusion/outputformat!!text}} action=$action$ linebreak=\\\"\\n\\\" >\\n\\n\\t<!-- set the correct separator character before generating output -->\\n\\n\\t\\t<!-- generate wikitext output using macro -->\\n        <$wikify name=\\\"wikitextoutput\\\" text=<<fuse-export>> >\\n\\t\\t\\t<!-- also generate raw HTML output -->\\n\\t\\t\\t<$wikify name=\\\"htmloutput\\\" text=<<wikitextoutput>> output=\\\"html\\\">\\n\\t\\t\\t\\t<$wikify name=\\\"mdoutput\\\" text=<<toMarkdown>> >\\n\\t\\t\\t\\t\\t<!-- pick the correct output based on configuration setting -->\\n\\t\\t\\t\\t<!-- pick the correct output based on configuration setting -->\\n\\t\\t\\t\\t<$set name=\\\"wiki_md\\\" filter=\\\"[<outputformat-config>!match[wikitext]then<mdoutput>search-replace:g[—],[---]else<wikitextoutput>]\\\" select=\\\"0\\\">\\n\\t\\t\\t\\t<$set name=\\\"output\\\" filter=\\\"[<outputformat-config>match[html]then<htmloutput>search-replace:g:regexp<pattern>,<formatter>else<wiki_md>]\\\" select=\\\"0\\\">\\n\\t\\t\\t\\t\\t<!-- handle action correctly between new tiddler, overwrite tiddler, copy to clipboard -->\\n\\t\\t\\t\\t\\t<$list filter=\\\"[<action>match[new]]\\\">\\n\\t\\t\\t\\t\\t\\t\\t<<create-and-edit>>\\n\\t\\t\\t\\t\\t</$list>\\n\\n\\t\\t\\t\\t\\t<$list filter=\\\"[<action>match[overwrite]]\\\">\\n\\t\\t\\t\\t\\t\\t<$set name=\\\"currentTiddler\\\" value=<<storyTiddler>> >\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t<<overwrite-and-edit $type$>>\\n\\t\\t\\t\\t\\t\\t</$set>\\n\\t\\t\\t\\t\\t</$list>\\n\\n\\t\\t\\t\\t\\t<$list filter=\\\"[<action>match[clipboard]]\\\">\\n\\t\\t\\t\\t\\t\\t<<copy-clipboard>>\\n\\t\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t</$set>\\n\\t\\t\\t\\t</$wikify>\\n\\t\\t\\t</$wikify>\\n        </$wikify>\\n</$vars>\\n\\\\end\\n\\n\\n\\\\define create-and-edit()\\n<$set name=\\\"outputformat\\\" value=\\\"$(outputformat-config)$\\\">\\n\\t<!-- as a courtesy, set the tiddler type to markdown when needed -->\\n\\t<$set name=\\\"tiddlertype\\\" filter=\\\"[<outputformat>match[markdown]then[text/x-markdown]else[text/vnd.tiddlywiki]]\\\" select=\\\"0\\\">\\n\\t\\t<$reveal type=\\\"match\\\" state=\\\"$:/config/sq/streams-fusion/editmode!!text\\\" text=\\\"yes\\\">\\n\\t\\t\\t<$action-sendmessage $message=\\\"tm-new-tiddler\\\" title=\\\"$(export-name)$\\\" text=<<output>> type=<<tiddlertype>> />\\n\\t\\t</$reveal>\\n\\t\\t<$reveal type=\\\"nomatch\\\" state=\\\"$:/config/sq/streams-fusion/editmode!!text\\\" text=\\\"yes\\\">\\n\\t\\t\\t<$action-createtiddler $basetitle=\\\"$(export-name)$\\\" text=<<output>> type=<<tiddlertype>> $overwrite=\\\"yes\\\" />\\n\\t\\t\\t<$action-navigate $to=<<export-name>> $scroll=\\\"yes\\\"/>\\n\\t\\t</$reveal>\\n\\t</$set>\\n</$set>\\n\\\\end\\n\\n\\n\\\\define overwrite-and-edit()\\n<$set name=\\\"outputformat\\\" value=\\\"$(outputformat-config)$\\\">\\n\\t<$action-confirm $message={{$:/plugins/phiv/streams-fusion/language##overwrite-warning-message}}>\\n\\t\\t<!-- as a courtesy, set the tiddler type to markdown when needed -->\\n\\t\\t<$set name=\\\"tiddlertype\\\" filter=\\\"[<outputformat>match[markdown]then[text/x-markdown]else[text/vnd.tiddlywiki]]\\\" select=\\\"0\\\">\\n\\t\\t\\t<$tiddler tiddler=\\\"$(target)$\\\">\\n\\t\\t\\t\\t<$action-setfield $field=\\\"text\\\" $value=<<output>> type=<<tiddlertype>> />\\n\\t\\t\\t\\t<$list filter=\\\"[enlist{!!stream-list}count[]!match[0]]\\\" variable=\\\"ignore\\\">\\n\\t\\t\\t\\t\\t<<delete-children>>\\n\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t<$action-deletefield stream-type stream-list />\\n\\t\\t\\t\\t<$reveal type=\\\"match\\\" state=\\\"$:/config/sq/streams-fusion/editmode!!text\\\" text=\\\"yes\\\">\\n\\t\\t\\t\\t\\t\\t<$action-sendmessage $message=\\\"tm-edit-tiddler\\\" $param=<<currentTiddler>> />\\n\\t\\t\\t\\t</$reveal>\\n\\t\\t\\t</$tiddler>\\n\\t\\t</$set>\\n\\t</$action-confirm>\\n</$set>\\n\\\\end\\n\\n\\\\define copy-clipboard() <$action-sendmessage $message=\\\"tm-copy-to-clipboard\\\" $param=<<output>>/>\\n\\n\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/macros\",\n            \"tags\": \"\",\n            \"modified\": \"20220410223910623\"\n        },\n        \"$:/plugins/phiv/streams-fusion/readme\": {\n            \"created\": \"20210721002206824\",\n            \"text\": \"|!Version |{{$:/plugins/phiv/streams-fusion!!version}} |\\n|!Build date |<$view tiddler=\\\"$:/plugins/phiv/streams-fusion\\\" field=\\\"modified\\\" format=\\\"date\\\" template=\\\"MMM DDth, YYYY\\\" /> |\\n|!TW5 compatibility |{{$:/plugins/phiv/streams-fusion!!core-version}} |\\n\\n!! What is this?\\n\\n[[Streams-fusion|https://fastfreddy.gitlab.io/streams-fusion/]] is an addon to the [[Streams|https://saqimtiaz.github.io/streams/]] plugin that lets the user fuse (merge) and export a hierarchy of nodes from a stream, into a single tiddler's wikitext, raw html or markdown.\\n\\n!! Why would I want to do this?\\n\\nGreat question! You probably will not. Streams users like to edit their thoughts rapidly, jolt down ideas, leverage keyboard shortcuts extensively, and re-organize them using drag and drop features.\\n\\nOnce that process has taken place however, some users may wish to collapse the streams tiddlers down to a single \\\"regular\\\" tiddler, which may be easier to export, share with non-stream users, convert to another format, etc... It is worth pointing out the similarities with the experimental [[Streams-based list editor|https://saqimtiaz.github.io/sq-tw/single-tiddler-streams.html#test]] by Saq Imtiaz.\\n\\n!! Features\\n\\n* preserve the streams node hierarchy (maintains the tree structure)\\n* supports the following list formats:\\n** unordered lists (bullets)\\n** numbered lists (pound signs)\\n** regular paragraphs -> please note that choosing \\\"paragraphs\\\" flattens the hierarchy\\n* supports the following output formats:\\n** wikitext\\n** raw HTML output (this is an export format, all wikitext - e.g. macros, widgets - is rendered first)\\n** markdown (this is an export format, all wikitext - e.g. macros, widgets - is rendered first)\\n* supports sub-tree (branches) exports (using the node context menu or the keyboard shortcuts)\\n* exports the root node's text if it exists\\n* wraps complex nodes inside `<div>` tags, supporting complex streams such as [[Stream's FAQ|https://saqimtiaz.github.io/streams/#FAQs]] and [[Stream's working with streams tiddlers|https://saqimtiaz.github.io/streams/#Working%20with%20streams%20tiddlers]] well (see Technical details below)\\n** -> please note that choosing the \\\"paragraphs\\\" list format does not need to wrap complex nodes inside `<div>` tags\\n\\n!! Installation\\n\\n!!! Dependencies:\\n\\nFirst install the two prerequisite plugins (visit the page and follow the installation instructions):\\n\\n* the [[Streams plugin|https://saqimtiaz.github.io/streams/]] (''v1.2.22'' or greater)\\n** ''the recommended way to install Streams is to add the [[SQ plugin library|https://saqimtiaz.github.io/SQPL/]], and then add the plugin through the [[Control Panel|$:/core/ui/ControlPanel/Plugins]]''.\\n* the [[relink plugin|https://flibbles.github.io/tw5-relink/]].\\n* (optional) the [[official Markdown plugin for TiddlyWiki|https://tiddlywiki.com/plugins/tiddlywiki/markdown/#%24%3A%2Fplugins%2Ftiddlywiki%2Fmarkdown]] can be installed. This will be useful to render new markdown tiddlers correctly, when choosing the \\\"markdown\\\" output format.\\n\\n!!! Installation steps:\\n\\n* install the [[streams-fusion|$:/plugins/phiv/streams-fusion]] plugin\\n** ''the recommended way to install streams-fusion is to add through the [[SQ plugin library|https://saqimtiaz.github.io/SQPL/]], using the [[Control Panel|$:/core/ui/ControlPanel/Plugins]]''\\n* starting with version 0.0.9, the plugin includes a javascript-based markdown conversion component. As a result, the ~TiddlyWiki notebook must be saved and reloaded\\n\\n!! Usage\\n\\n* to fuse a complete stream, use the the button at the bottom of the tiddler, next to the `add node` button.\\n** [img[$:/plugins/phiv/streams-fusion/button.png]]\\n* to fuse a portion of a stream, use the context menu of the top-most node or the keyboard shortcuts when editing a node\\n** [img[$:/plugins/phiv/streams-fusion/context-menu.png]]\\n* Streams Fusion configuration settings can be viewed or changed at the bottom of the `Streams settings` configuration page, accessible through the Control Panel\\n\\n\\n!! Technical details\\n\\n* The general case for Streams fusion is non-trivial; Streams nodes ''are'' full tiddlers and thus can include rich content (lists, tables, multi-line, headings, etc.). wikitext list items ''are not'', fundamentally. As a result, some node tiddler content cannot be retained, unchanged, during the conversion if one aims to preserve the hierarchy intact.\\n* This plugin favours visual and hierarchical accuracy of the combined tiddler (except for the paragraphs list format), once rendered, over the accuracy of the wikitext from exported node tiddlers. This means that HTML artefacts are introduced when the node content would break down the lists or numbered lists, for example when nodes contain multi line text. In edit mode, these complex nodes will show `<div>` tags.  Jan's [[Streams-to-text addon|https://szen.io/stream/]] does a better job at preserving original wikitext, at the expense of the tree structure and the rendering of complex node tiddlers. It can be considered to \\\"flatten\\\" the tree.\\n* Nodes that include locally-relevant macro code, or transclusions of local fields/tags will not fuse well, generally. The context of the tiddler changes after fusion, and wikitext code that relies on the context will likely not behave as expected. For example, the title of a node tiddler will change, once merged into a single tiddler (either into new name, or the name of the root tiddler). Stream nodes fields are not be preserved in the fusion.\\n* The approach of using the [[space-space-newline plugin|https://wikilabs.github.io/editions/space-space-newline/]] and replacing newlines within node tiddlers with space-space-newlines within list items, instead of wrapping in `<div>` tags was explored, but results were unsatisfactory: for example, block rules such as headings work well in a node tiddler but were not processed when in a list item.\\n\\n\\n!! Roadmap\\n\\n* extract the markdown conversion into a standalone plugin that can be used without Streams\\n* investigate markdown conversion anomalies (e.g. `<code>`)\\n\\n!! Credits\\n\\n* Jeremy and the developer community for [[TiddlyWiki|https://tiddlywiki.com]]; for the enduring resolve to maintain this superb note-taking tool.\\n* Saq Imtiaz for the revolutionary [[Streams|https://saqimtiaz.github.io/streams/]] plugin, taking [[TiddlyWiki|https://tiddlywiki.com]] to new heights, and his overall community involvement.\\n* Jan's [[Streams-to-text addon|https://szen.io/stream/]] for the css styles and the inspiration how to approach the merging of Streams tiddlers. \\n* https://www.freepik.com/ for the streams-fusion icon. Jan's icon is still nicer, but he claimed it first.\\n* The [[relink plugin|https://flibbles.github.io/tw5-relink/]] for a set of features we now can't live without.\\n* The [[Tinka plugin packager|https://tinkaplugin.github.io]]; Streams-fusion was packaged without a node.js ~TiddlyWiki server.\\n* The [[Turndown library|https://github.com/mixmark-io/turndown]] for markdown conversion, and the [[Typewriter plugin|https://saqimtiaz.github.io/sq-tw/typewriter.html]] to understand how to integrate it into ~TiddlyWiki.\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/readme\",\n            \"tags\": \"\",\n            \"revision\": \"5\",\n            \"modified\": \"20211201001018476\",\n            \"bag\": \"default\"\n        },\n        \"$:/plugins/phiv/streams-fusion/stylesheet\": {\n            \"text\": \"button.szen-streams-btn svg.tc-image-button { height: 20px; width: 20px; color: #ccc; fill: #ccc; margin-bottom: 3px; }\\n\\nbutton.szen-streams-btn:hover svg.tc-image-button { color: #444; fill: #444; }\\n\\n.stream-node-handle { margin-right: 7px; }\\n\\n.settings-switch {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  vertical-align: middle;\\n  word-wrap: break-word;\\n}\\n\\ntable.context-menu-table, table.context-menu-table td {\\n  border:none;\\nborderspacing:0;\\npadding:0;\\n}\",\n            \"type\": \"text/css\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/stylesheet\",\n            \"tags\": \"$:/tags/Stylesheet\",\n            \"modified\": \"20210727113245065\",\n            \"created\": \"20210720014259621\"\n        },\n        \"$:/plugins/phiv/streams-fusion/turndownMacro.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/phiv/streams-fusion/turndownMacro.js\\ntype: application/javascript\\nmodule-type: macro\\nMacro that turns html into markdown using the Turndown library\\nRequires the Turndown library $:/plugins/sq/typewriter/lib/turndown-browser-umd.js\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nMacro that turns html into markdown using the Turndown library\\nRequires the Turndown library $:/plugins/sq/typewriter/lib/turndown-browser-umd.js\\n*/\\n\\nexports.name = \\\"turndown\\\";\\n\\nwindow.TurndownService = require(\\\"$:/plugins/sq/typewriter/lib/turndown-browser-umd.js\\\");\\n\\nexports.params = [\\n\\t{name: \\\"html\\\"},\\n\\t{name: \\\"headingStyle\\\"},\\n\\t{name: \\\"hr\\\"},\\n\\t{name: \\\"bulletListMarker\\\"},\\n\\t{name: \\\"codeBlockStyle\\\"},\\n\\t{name: \\\"fence\\\"},\\n\\t{name: \\\"emDelimiter\\\"},\\n\\t{name: \\\"strongDelimiter\\\"},\\n\\t{name: \\\"linkStyle\\\"},\\n\\t{name: \\\"linkReferenceStyle\\\"},\\n\\t{name: \\\"preformattedCode\\\"}\\n];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(html, headingStyle, hr, bulletListMarker, codeBlockStyle, fence, emDelimiter, strongDelimiter, linkStyle, linkReferenceStyle, preformattedCode) {\\n\\tvar opts = {};\\n    opts[\\\"headingStyle\\\"] = headingStyle || \\\"setex\\\";\\n    opts[\\\"hr\\\"] = hr || \\\"- - -\\\";\\n    opts[\\\"bulletListMarker\\\"] = bulletListMarker || \\\"*\\\";\\n    opts[\\\"codeBlockStyle\\\"] = codeBlockStyle || \\\"indented\\\";\\n    opts[\\\"fence\\\"] = fence || \\\"```\\\";\\n    opts[\\\"emDelimiter\\\"] = emDelimiter || \\\"_\\\";\\n    opts[\\\"strongDelimiter\\\"] = strongDelimiter || \\\"**\\\";\\n    opts[\\\"linkStyle\\\"] = linkStyle || \\\"inlined\\\";\\n    opts[\\\"linkReferenceStyle\\\"] = linkReferenceStyle || \\\"full\\\";\\n    opts[\\\"preformattedCode\\\"] = preformattedCode || \\\"true\\\";\\n\\n\\tvar turndownService = new TurndownService(opts);\\n\\treturn turndownService.turndown(html);\\n};\\n\\n})();\",\n            \"type\": \"application/javascript\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/turndownMacro.js\",\n            \"tags\": \"\",\n            \"module-type\": \"macro\",\n            \"modified\": \"20211124024536981\",\n            \"created\": \"20211117021106327\"\n        },\n        \"$:/plugins/phiv/streams-fusion/ui/templates/settings/menu-input-switch\": {\n            \"text\": \"<table class=\\\"context-menu-table\\\">\\n<tr>\\n<td><label class=\\\"squi-form-label\\\" style=\\\" pointer-events: none;\\\"><$link tooltip={{!!description}} style=\\\"font-weight: normal;\\\">{{!!short-caption-left}}</$link></label></td>\\n<td><$checkbox field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" class=\\\"squi-form-switch\\\"/></td>\\n<td><label class=\\\"squi-form-label\\\"  style=\\\" pointer-events: none;\\\"><$link tooltip={{!!description}} style=\\\"font-weight: normal;\\\">{{!!short-caption-right}}</$link></label></td>\\n</tr>\\n</table>\\n\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/ui/templates/settings/menu-input-switch\",\n            \"tags\": \"\",\n            \"modified\": \"20211120125513921\",\n            \"created\": \"20210726105829177\"\n        },\n        \"$:/plugins/phiv/streams-fusion/ui/templates/settings/menu-radio\": {\n            \"text\": \"<$radio field=\\\"text\\\" id=\\\"radio-no\\\" value={{!!value-no}}>{{!!short-caption-no}}</$radio><br />\\n<$radio field=\\\"text\\\" id=\\\"radio-neutral\\\" value={{!!value-neutral}}>{{!!short-caption-neutral}}</$radio><br />\\n<$radio field=\\\"text\\\" id=\\\"radio-yes\\\" value={{!!value-yes}}>{{!!short-caption-yes}}</$radio><br />\\n\\n\",\n            \"title\": \"$:/plugins/phiv/streams-fusion/ui/templates/settings/menu-radio\",\n            \"tags\": \"\",\n            \"short-caption-yes\": \"best\",\n            \"short-caption-no\": \"good\",\n            \"short-caption-neutral\": \"better\",\n            \"modified\": \"20211122030330744\",\n            \"created\": \"20211120122505494\"\n        },\n        \"$:/plugins/sq/typewriter/lib/turndown-browser-umd.js\": {\n            \"created\": \"20211119021132036\",\n            \"text\": \"(function (global, factory) {\\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\\n  typeof define === 'function' && define.amd ? define(factory) :\\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.TurndownService = factory());\\n}(this, (function () { 'use strict';\\n\\n  function extend (destination) {\\n    for (var i = 1; i < arguments.length; i++) {\\n      var source = arguments[i];\\n      for (var key in source) {\\n        if (source.hasOwnProperty(key)) destination[key] = source[key];\\n      }\\n    }\\n    return destination\\n  }\\n\\n  function repeat (character, count) {\\n    return Array(count + 1).join(character)\\n  }\\n\\n  function trimLeadingNewlines (string) {\\n    return string.replace(/^\\\\n*/, '')\\n  }\\n\\n  function trimTrailingNewlines (string) {\\n    // avoid match-at-end regexp bottleneck, see #370\\n    var indexEnd = string.length;\\n    while (indexEnd > 0 && string[indexEnd - 1] === '\\\\n') indexEnd--;\\n    return string.substring(0, indexEnd)\\n  }\\n\\n  var blockElements = [\\n    'ADDRESS', 'ARTICLE', 'ASIDE', 'AUDIO', 'BLOCKQUOTE', 'BODY', 'CANVAS',\\n    'CENTER', 'DD', 'DIR', 'DIV', 'DL', 'DT', 'FIELDSET', 'FIGCAPTION', 'FIGURE',\\n    'FOOTER', 'FORM', 'FRAMESET', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'HEADER',\\n    'HGROUP', 'HR', 'HTML', 'ISINDEX', 'LI', 'MAIN', 'MENU', 'NAV', 'NOFRAMES',\\n    'NOSCRIPT', 'OL', 'OUTPUT', 'P', 'PRE', 'SECTION', 'TABLE', 'TBODY', 'TD',\\n    'TFOOT', 'TH', 'THEAD', 'TR', 'UL'\\n  ];\\n\\n  function isBlock (node) {\\n    return is(node, blockElements)\\n  }\\n\\n  var voidElements = [\\n    'AREA', 'BASE', 'BR', 'COL', 'COMMAND', 'EMBED', 'HR', 'IMG', 'INPUT',\\n    'KEYGEN', 'LINK', 'META', 'PARAM', 'SOURCE', 'TRACK', 'WBR'\\n  ];\\n\\n  function isVoid (node) {\\n    return is(node, voidElements)\\n  }\\n\\n  function hasVoid (node) {\\n    return has(node, voidElements)\\n  }\\n\\n  var meaningfulWhenBlankElements = [\\n    'A', 'TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TH', 'TD', 'IFRAME', 'SCRIPT',\\n    'AUDIO', 'VIDEO'\\n  ];\\n\\n  function isMeaningfulWhenBlank (node) {\\n    return is(node, meaningfulWhenBlankElements)\\n  }\\n\\n  function hasMeaningfulWhenBlank (node) {\\n    return has(node, meaningfulWhenBlankElements)\\n  }\\n\\n  function is (node, tagNames) {\\n    return tagNames.indexOf(node.nodeName) >= 0\\n  }\\n\\n  function has (node, tagNames) {\\n    return (\\n      node.getElementsByTagName &&\\n      tagNames.some(function (tagName) {\\n        return node.getElementsByTagName(tagName).length\\n      })\\n    )\\n  }\\n\\n  var rules = {};\\n\\n  rules.paragraph = {\\n    filter: 'p',\\n\\n    replacement: function (content) {\\n      return '\\\\n\\\\n' + content + '\\\\n\\\\n'\\n    }\\n  };\\n\\n  rules.lineBreak = {\\n    filter: 'br',\\n\\n    replacement: function (content, node, options) {\\n      return options.br + '\\\\n'\\n    }\\n  };\\n\\n  rules.heading = {\\n    filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\\n\\n    replacement: function (content, node, options) {\\n      var hLevel = Number(node.nodeName.charAt(1));\\n\\n      if (options.headingStyle === 'setext' && hLevel < 3) {\\n        var underline = repeat((hLevel === 1 ? '=' : '-'), content.length);\\n        return (\\n          '\\\\n\\\\n' + content + '\\\\n' + underline + '\\\\n\\\\n'\\n        )\\n      } else {\\n        return '\\\\n\\\\n' + repeat('#', hLevel) + ' ' + content + '\\\\n\\\\n'\\n      }\\n    }\\n  };\\n\\n  rules.blockquote = {\\n    filter: 'blockquote',\\n\\n    replacement: function (content) {\\n      content = content.replace(/^\\\\n+|\\\\n+$/g, '');\\n      content = content.replace(/^/gm, '> ');\\n      return '\\\\n\\\\n' + content + '\\\\n\\\\n'\\n    }\\n  };\\n\\n  rules.list = {\\n    filter: ['ul', 'ol'],\\n\\n    replacement: function (content, node) {\\n      var parent = node.parentNode;\\n      if (parent.nodeName === 'LI' && parent.lastElementChild === node) {\\n        return '\\\\n' + content\\n      } else {\\n        return '\\\\n\\\\n' + content + '\\\\n\\\\n'\\n      }\\n    }\\n  };\\n\\n  rules.listItem = {\\n    filter: 'li',\\n\\n    replacement: function (content, node, options) {\\n      content = content\\n        .replace(/^\\\\n+/, '') // remove leading newlines\\n        .replace(/\\\\n+$/, '\\\\n') // replace trailing newlines with just a single one\\n        .replace(/\\\\n/gm, '\\\\n    '); // indent\\n      var prefix = options.bulletListMarker + '   ';\\n      var parent = node.parentNode;\\n      if (parent.nodeName === 'OL') {\\n        var start = parent.getAttribute('start');\\n        var index = Array.prototype.indexOf.call(parent.children, node);\\n        prefix = (start ? Number(start) + index : index + 1) + '.  ';\\n      }\\n      return (\\n        prefix + content + (node.nextSibling && !/\\\\n$/.test(content) ? '\\\\n' : '')\\n      )\\n    }\\n  };\\n\\n  rules.indentedCodeBlock = {\\n    filter: function (node, options) {\\n      return (\\n        options.codeBlockStyle === 'indented' &&\\n        node.nodeName === 'PRE' &&\\n        node.firstChild &&\\n        node.firstChild.nodeName === 'CODE'\\n      )\\n    },\\n\\n    replacement: function (content, node, options) {\\n      return (\\n        '\\\\n\\\\n    ' +\\n        node.firstChild.textContent.replace(/\\\\n/g, '\\\\n    ') +\\n        '\\\\n\\\\n'\\n      )\\n    }\\n  };\\n\\n  rules.fencedCodeBlock = {\\n    filter: function (node, options) {\\n      return (\\n        options.codeBlockStyle === 'fenced' &&\\n        node.nodeName === 'PRE' &&\\n        node.firstChild &&\\n        node.firstChild.nodeName === 'CODE'\\n      )\\n    },\\n\\n    replacement: function (content, node, options) {\\n      var className = node.firstChild.getAttribute('class') || '';\\n      var language = (className.match(/language-(\\\\S+)/) || [null, ''])[1];\\n      var code = node.firstChild.textContent;\\n\\n      var fenceChar = options.fence.charAt(0);\\n      var fenceSize = 3;\\n      var fenceInCodeRegex = new RegExp('^' + fenceChar + '{3,}', 'gm');\\n\\n      var match;\\n      while ((match = fenceInCodeRegex.exec(code))) {\\n        if (match[0].length >= fenceSize) {\\n          fenceSize = match[0].length + 1;\\n        }\\n      }\\n\\n      var fence = repeat(fenceChar, fenceSize);\\n\\n      return (\\n        '\\\\n\\\\n' + fence + language + '\\\\n' +\\n        code.replace(/\\\\n$/, '') +\\n        '\\\\n' + fence + '\\\\n\\\\n'\\n      )\\n    }\\n  };\\n\\n  rules.horizontalRule = {\\n    filter: 'hr',\\n\\n    replacement: function (content, node, options) {\\n      return '\\\\n\\\\n' + options.hr + '\\\\n\\\\n'\\n    }\\n  };\\n\\n  rules.inlineLink = {\\n    filter: function (node, options) {\\n      return (\\n        options.linkStyle === 'inlined' &&\\n        node.nodeName === 'A' &&\\n        node.getAttribute('href')\\n      )\\n    },\\n\\n    replacement: function (content, node) {\\n      var href = node.getAttribute('href');\\n      var title = cleanAttribute(node.getAttribute('title'));\\n      if (title) title = ' \\\"' + title + '\\\"';\\n      return '[' + content + '](' + href + title + ')'\\n    }\\n  };\\n\\n  rules.referenceLink = {\\n    filter: function (node, options) {\\n      return (\\n        options.linkStyle === 'referenced' &&\\n        node.nodeName === 'A' &&\\n        node.getAttribute('href')\\n      )\\n    },\\n\\n    replacement: function (content, node, options) {\\n      var href = node.getAttribute('href');\\n      var title = cleanAttribute(node.getAttribute('title'));\\n      if (title) title = ' \\\"' + title + '\\\"';\\n      var replacement;\\n      var reference;\\n\\n      switch (options.linkReferenceStyle) {\\n        case 'collapsed':\\n          replacement = '[' + content + '][]';\\n          reference = '[' + content + ']: ' + href + title;\\n          break\\n        case 'shortcut':\\n          replacement = '[' + content + ']';\\n          reference = '[' + content + ']: ' + href + title;\\n          break\\n        default:\\n          var id = this.references.length + 1;\\n          replacement = '[' + content + '][' + id + ']';\\n          reference = '[' + id + ']: ' + href + title;\\n      }\\n\\n      this.references.push(reference);\\n      return replacement\\n    },\\n\\n    references: [],\\n\\n    append: function (options) {\\n      var references = '';\\n      if (this.references.length) {\\n        references = '\\\\n\\\\n' + this.references.join('\\\\n') + '\\\\n\\\\n';\\n        this.references = []; // Reset references\\n      }\\n      return references\\n    }\\n  };\\n\\n  rules.emphasis = {\\n    filter: ['em', 'i'],\\n\\n    replacement: function (content, node, options) {\\n      if (!content.trim()) return ''\\n      return options.emDelimiter + content + options.emDelimiter\\n    }\\n  };\\n\\n  rules.strong = {\\n    filter: ['strong', 'b'],\\n\\n    replacement: function (content, node, options) {\\n      if (!content.trim()) return ''\\n      return options.strongDelimiter + content + options.strongDelimiter\\n    }\\n  };\\n\\n  rules.code = {\\n    filter: function (node) {\\n      var hasSiblings = node.previousSibling || node.nextSibling;\\n      var isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings;\\n\\n      return node.nodeName === 'CODE' && !isCodeBlock\\n    },\\n\\n    replacement: function (content) {\\n      if (!content) return ''\\n      content = content.replace(/\\\\r?\\\\n|\\\\r/g, ' ');\\n\\n      var extraSpace = /^`|^ .*?[^ ].* $|`$/.test(content) ? ' ' : '';\\n      var delimiter = '`';\\n      var matches = content.match(/`+/gm) || [];\\n      while (matches.indexOf(delimiter) !== -1) delimiter = delimiter + '`';\\n\\n      return delimiter + extraSpace + content + extraSpace + delimiter\\n    }\\n  };\\n\\n  rules.image = {\\n    filter: 'img',\\n\\n    replacement: function (content, node) {\\n      var alt = cleanAttribute(node.getAttribute('alt'));\\n      var src = node.getAttribute('src') || '';\\n      var title = cleanAttribute(node.getAttribute('title'));\\n      var titlePart = title ? ' \\\"' + title + '\\\"' : '';\\n      return src ? '![' + alt + ']' + '(' + src + titlePart + ')' : ''\\n    }\\n  };\\n\\n  function cleanAttribute (attribute) {\\n    return attribute ? attribute.replace(/(\\\\n+\\\\s*)+/g, '\\\\n') : ''\\n  }\\n\\n  /**\\n   * Manages a collection of rules used to convert HTML to Markdown\\n   */\\n\\n  function Rules (options) {\\n    this.options = options;\\n    this._keep = [];\\n    this._remove = [];\\n\\n    this.blankRule = {\\n      replacement: options.blankReplacement\\n    };\\n\\n    this.keepReplacement = options.keepReplacement;\\n\\n    this.defaultRule = {\\n      replacement: options.defaultReplacement\\n    };\\n\\n    this.array = [];\\n    for (var key in options.rules) this.array.push(options.rules[key]);\\n  }\\n\\n  Rules.prototype = {\\n    add: function (key, rule) {\\n      this.array.unshift(rule);\\n    },\\n\\n    keep: function (filter) {\\n      this._keep.unshift({\\n        filter: filter,\\n        replacement: this.keepReplacement\\n      });\\n    },\\n\\n    remove: function (filter) {\\n      this._remove.unshift({\\n        filter: filter,\\n        replacement: function () {\\n          return ''\\n        }\\n      });\\n    },\\n\\n    forNode: function (node) {\\n      if (node.isBlank) return this.blankRule\\n      var rule;\\n\\n      if ((rule = findRule(this.array, node, this.options))) return rule\\n      if ((rule = findRule(this._keep, node, this.options))) return rule\\n      if ((rule = findRule(this._remove, node, this.options))) return rule\\n\\n      return this.defaultRule\\n    },\\n\\n    forEach: function (fn) {\\n      for (var i = 0; i < this.array.length; i++) fn(this.array[i], i);\\n    }\\n  };\\n\\n  function findRule (rules, node, options) {\\n    for (var i = 0; i < rules.length; i++) {\\n      var rule = rules[i];\\n      if (filterValue(rule, node, options)) return rule\\n    }\\n    return void 0\\n  }\\n\\n  function filterValue (rule, node, options) {\\n    var filter = rule.filter;\\n    if (typeof filter === 'string') {\\n      if (filter === node.nodeName.toLowerCase()) return true\\n    } else if (Array.isArray(filter)) {\\n      if (filter.indexOf(node.nodeName.toLowerCase()) > -1) return true\\n    } else if (typeof filter === 'function') {\\n      if (filter.call(rule, node, options)) return true\\n    } else {\\n      throw new TypeError('`filter` needs to be a string, array, or function')\\n    }\\n  }\\n\\n  /**\\n   * The collapseWhitespace function is adapted from collapse-whitespace\\n   * by Luc Thevenard.\\n   *\\n   * The MIT License (MIT)\\n   *\\n   * Copyright (c) 2014 Luc Thevenard <lucthevenard@gmail.com>\\n   *\\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\\n   * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n   * in the Software without restriction, including without limitation the rights\\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n   * copies of the Software, and to permit persons to whom the Software is\\n   * furnished to do so, subject to the following conditions:\\n   *\\n   * The above copyright notice and this permission notice shall be included in\\n   * all copies or substantial portions of the Software.\\n   *\\n   * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n   * THE SOFTWARE.\\n   */\\n\\n  /**\\n   * collapseWhitespace(options) removes extraneous whitespace from an the given element.\\n   *\\n   * @param {Object} options\\n   */\\n  function collapseWhitespace (options) {\\n    var element = options.element;\\n    var isBlock = options.isBlock;\\n    var isVoid = options.isVoid;\\n    var isPre = options.isPre || function (node) {\\n      return node.nodeName === 'PRE'\\n    };\\n\\n    if (!element.firstChild || isPre(element)) return\\n\\n    var prevText = null;\\n    var keepLeadingWs = false;\\n\\n    var prev = null;\\n    var node = next(prev, element, isPre);\\n\\n    while (node !== element) {\\n      if (node.nodeType === 3 || node.nodeType === 4) { // Node.TEXT_NODE or Node.CDATA_SECTION_NODE\\n        var text = node.data.replace(/[ \\\\r\\\\n\\\\t]+/g, ' ');\\n\\n        if ((!prevText || / $/.test(prevText.data)) &&\\n            !keepLeadingWs && text[0] === ' ') {\\n          text = text.substr(1);\\n        }\\n\\n        // `text` might be empty at this point.\\n        if (!text) {\\n          node = remove(node);\\n          continue\\n        }\\n\\n        node.data = text;\\n\\n        prevText = node;\\n      } else if (node.nodeType === 1) { // Node.ELEMENT_NODE\\n        if (isBlock(node) || node.nodeName === 'BR') {\\n          if (prevText) {\\n            prevText.data = prevText.data.replace(/ $/, '');\\n          }\\n\\n          prevText = null;\\n          keepLeadingWs = false;\\n        } else if (isVoid(node) || isPre(node)) {\\n          // Avoid trimming space around non-block, non-BR void elements and inline PRE.\\n          prevText = null;\\n          keepLeadingWs = true;\\n        } else if (prevText) {\\n          // Drop protection if set previously.\\n          keepLeadingWs = false;\\n        }\\n      } else {\\n        node = remove(node);\\n        continue\\n      }\\n\\n      var nextNode = next(prev, node, isPre);\\n      prev = node;\\n      node = nextNode;\\n    }\\n\\n    if (prevText) {\\n      prevText.data = prevText.data.replace(/ $/, '');\\n      if (!prevText.data) {\\n        remove(prevText);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * remove(node) removes the given node from the DOM and returns the\\n   * next node in the sequence.\\n   *\\n   * @param {Node} node\\n   * @return {Node} node\\n   */\\n  function remove (node) {\\n    var next = node.nextSibling || node.parentNode;\\n\\n    node.parentNode.removeChild(node);\\n\\n    return next\\n  }\\n\\n  /**\\n   * next(prev, current, isPre) returns the next node in the sequence, given the\\n   * current and previous nodes.\\n   *\\n   * @param {Node} prev\\n   * @param {Node} current\\n   * @param {Function} isPre\\n   * @return {Node}\\n   */\\n  function next (prev, current, isPre) {\\n    if ((prev && prev.parentNode === current) || isPre(current)) {\\n      return current.nextSibling || current.parentNode\\n    }\\n\\n    return current.firstChild || current.nextSibling || current.parentNode\\n  }\\n\\n  /*\\n   * Set up window for Node.js\\n   */\\n\\n  var root = (typeof window !== 'undefined' ? window : {});\\n\\n  /*\\n   * Parsing HTML strings\\n   */\\n\\n  function canParseHTMLNatively () {\\n    var Parser = root.DOMParser;\\n    var canParse = false;\\n\\n    // Adapted from https://gist.github.com/1129031\\n    // Firefox/Opera/IE throw errors on unsupported types\\n    try {\\n      // WebKit returns null on unsupported types\\n      if (new Parser().parseFromString('', 'text/html')) {\\n        canParse = true;\\n      }\\n    } catch (e) {}\\n\\n    return canParse\\n  }\\n\\n  function createHTMLParser () {\\n    var Parser = function () {};\\n\\n    {\\n      if (shouldUseActiveX()) {\\n        Parser.prototype.parseFromString = function (string) {\\n          var doc = new window.ActiveXObject('htmlfile');\\n          doc.designMode = 'on'; // disable on-page scripts\\n          doc.open();\\n          doc.write(string);\\n          doc.close();\\n          return doc\\n        };\\n      } else {\\n        Parser.prototype.parseFromString = function (string) {\\n          var doc = document.implementation.createHTMLDocument('');\\n          doc.open();\\n          doc.write(string);\\n          doc.close();\\n          return doc\\n        };\\n      }\\n    }\\n    return Parser\\n  }\\n\\n  function shouldUseActiveX () {\\n    var useActiveX = false;\\n    try {\\n      document.implementation.createHTMLDocument('').open();\\n    } catch (e) {\\n      if (window.ActiveXObject) useActiveX = true;\\n    }\\n    return useActiveX\\n  }\\n\\n  var HTMLParser = canParseHTMLNatively() ? root.DOMParser : createHTMLParser();\\n\\n  function RootNode (input, options) {\\n    var root;\\n    if (typeof input === 'string') {\\n      var doc = htmlParser().parseFromString(\\n        // DOM parsers arrange elements in the <head> and <body>.\\n        // Wrapping in a custom element ensures elements are reliably arranged in\\n        // a single element.\\n        '<x-turndown id=\\\"turndown-root\\\">' + input + '</x-turndown>',\\n        'text/html'\\n      );\\n      root = doc.getElementById('turndown-root');\\n    } else {\\n      root = input.cloneNode(true);\\n    }\\n    collapseWhitespace({\\n      element: root,\\n      isBlock: isBlock,\\n      isVoid: isVoid,\\n      isPre: options.preformattedCode ? isPreOrCode : null\\n    });\\n\\n    return root\\n  }\\n\\n  var _htmlParser;\\n  function htmlParser () {\\n    _htmlParser = _htmlParser || new HTMLParser();\\n    return _htmlParser\\n  }\\n\\n  function isPreOrCode (node) {\\n    return node.nodeName === 'PRE' || node.nodeName === 'CODE'\\n  }\\n\\n  function Node (node, options) {\\n    node.isBlock = isBlock(node);\\n    node.isCode = node.nodeName === 'CODE' || node.parentNode.isCode;\\n    node.isBlank = isBlank(node);\\n    node.flankingWhitespace = flankingWhitespace(node, options);\\n    return node\\n  }\\n\\n  function isBlank (node) {\\n    return (\\n      !isVoid(node) &&\\n      !isMeaningfulWhenBlank(node) &&\\n      /^\\\\s*$/i.test(node.textContent) &&\\n      !hasVoid(node) &&\\n      !hasMeaningfulWhenBlank(node)\\n    )\\n  }\\n\\n  function flankingWhitespace (node, options) {\\n    if (node.isBlock || (options.preformattedCode && node.isCode)) {\\n      return { leading: '', trailing: '' }\\n    }\\n\\n    var edges = edgeWhitespace(node.textContent);\\n\\n    // abandon leading ASCII WS if left-flanked by ASCII WS\\n    if (edges.leadingAscii && isFlankedByWhitespace('left', node, options)) {\\n      edges.leading = edges.leadingNonAscii;\\n    }\\n\\n    // abandon trailing ASCII WS if right-flanked by ASCII WS\\n    if (edges.trailingAscii && isFlankedByWhitespace('right', node, options)) {\\n      edges.trailing = edges.trailingNonAscii;\\n    }\\n\\n    return { leading: edges.leading, trailing: edges.trailing }\\n  }\\n\\n  function edgeWhitespace (string) {\\n    var m = string.match(/^(([ \\\\t\\\\r\\\\n]*)(\\\\s*))[\\\\s\\\\S]*?((\\\\s*?)([ \\\\t\\\\r\\\\n]*))$/);\\n    return {\\n      leading: m[1], // whole string for whitespace-only strings\\n      leadingAscii: m[2],\\n      leadingNonAscii: m[3],\\n      trailing: m[4], // empty for whitespace-only strings\\n      trailingNonAscii: m[5],\\n      trailingAscii: m[6]\\n    }\\n  }\\n\\n  function isFlankedByWhitespace (side, node, options) {\\n    var sibling;\\n    var regExp;\\n    var isFlanked;\\n\\n    if (side === 'left') {\\n      sibling = node.previousSibling;\\n      regExp = / $/;\\n    } else {\\n      sibling = node.nextSibling;\\n      regExp = /^ /;\\n    }\\n\\n    if (sibling) {\\n      if (sibling.nodeType === 3) {\\n        isFlanked = regExp.test(sibling.nodeValue);\\n      } else if (options.preformattedCode && sibling.nodeName === 'CODE') {\\n        isFlanked = false;\\n      } else if (sibling.nodeType === 1 && !isBlock(sibling)) {\\n        isFlanked = regExp.test(sibling.textContent);\\n      }\\n    }\\n    return isFlanked\\n  }\\n\\n  var reduce = Array.prototype.reduce;\\n  var escapes = [\\n    [/\\\\\\\\/g, '\\\\\\\\\\\\\\\\'],\\n    [/\\\\*/g, '\\\\\\\\*'],\\n    [/^-/g, '\\\\\\\\-'],\\n    [/^\\\\+ /g, '\\\\\\\\+ '],\\n    [/^(=+)/g, '\\\\\\\\$1'],\\n    [/^(#{1,6}) /g, '\\\\\\\\$1 '],\\n    [/`/g, '\\\\\\\\`'],\\n    [/^~~~/g, '\\\\\\\\~~~'],\\n    [/\\\\[/g, '\\\\\\\\['],\\n    [/\\\\]/g, '\\\\\\\\]'],\\n    [/^>/g, '\\\\\\\\>'],\\n    [/_/g, '\\\\\\\\_'],\\n    [/^(\\\\d+)\\\\. /g, '$1\\\\\\\\. ']\\n  ];\\n\\n  function TurndownService (options) {\\n    if (!(this instanceof TurndownService)) return new TurndownService(options)\\n\\n    var defaults = {\\n      rules: rules,\\n      headingStyle: 'setext',\\n      hr: '* * *',\\n      bulletListMarker: '*',\\n      codeBlockStyle: 'indented',\\n      fence: '```',\\n      emDelimiter: '_',\\n      strongDelimiter: '**',\\n      linkStyle: 'inlined',\\n      linkReferenceStyle: 'full',\\n      br: '  ',\\n      preformattedCode: false,\\n      blankReplacement: function (content, node) {\\n        return node.isBlock ? '\\\\n\\\\n' : ''\\n      },\\n      keepReplacement: function (content, node) {\\n        return node.isBlock ? '\\\\n\\\\n' + node.outerHTML + '\\\\n\\\\n' : node.outerHTML\\n      },\\n      defaultReplacement: function (content, node) {\\n        return node.isBlock ? '\\\\n\\\\n' + content + '\\\\n\\\\n' : content\\n      }\\n    };\\n    this.options = extend({}, defaults, options);\\n    this.rules = new Rules(this.options);\\n  }\\n\\n  TurndownService.prototype = {\\n    /**\\n     * The entry point for converting a string or DOM node to Markdown\\n     * @public\\n     * @param {String|HTMLElement} input The string or DOM node to convert\\n     * @returns A Markdown representation of the input\\n     * @type String\\n     */\\n\\n    turndown: function (input) {\\n      if (!canConvert(input)) {\\n        throw new TypeError(\\n          input + ' is not a string, or an element/document/fragment node.'\\n        )\\n      }\\n\\n      if (input === '') return ''\\n\\n      var output = process.call(this, new RootNode(input, this.options));\\n      return postProcess.call(this, output)\\n    },\\n\\n    /**\\n     * Add one or more plugins\\n     * @public\\n     * @param {Function|Array} plugin The plugin or array of plugins to add\\n     * @returns The Turndown instance for chaining\\n     * @type Object\\n     */\\n\\n    use: function (plugin) {\\n      if (Array.isArray(plugin)) {\\n        for (var i = 0; i < plugin.length; i++) this.use(plugin[i]);\\n      } else if (typeof plugin === 'function') {\\n        plugin(this);\\n      } else {\\n        throw new TypeError('plugin must be a Function or an Array of Functions')\\n      }\\n      return this\\n    },\\n\\n    /**\\n     * Adds a rule\\n     * @public\\n     * @param {String} key The unique key of the rule\\n     * @param {Object} rule The rule\\n     * @returns The Turndown instance for chaining\\n     * @type Object\\n     */\\n\\n    addRule: function (key, rule) {\\n      this.rules.add(key, rule);\\n      return this\\n    },\\n\\n    /**\\n     * Keep a node (as HTML) that matches the filter\\n     * @public\\n     * @param {String|Array|Function} filter The unique key of the rule\\n     * @returns The Turndown instance for chaining\\n     * @type Object\\n     */\\n\\n    keep: function (filter) {\\n      this.rules.keep(filter);\\n      return this\\n    },\\n\\n    /**\\n     * Remove a node that matches the filter\\n     * @public\\n     * @param {String|Array|Function} filter The unique key of the rule\\n     * @returns The Turndown instance for chaining\\n     * @type Object\\n     */\\n\\n    remove: function (filter) {\\n      this.rules.remove(filter);\\n      return this\\n    },\\n\\n    /**\\n     * Escapes Markdown syntax\\n     * @public\\n     * @param {String} string The string to escape\\n     * @returns A string with Markdown syntax escaped\\n     * @type String\\n     */\\n\\n    escape: function (string) {\\n      return escapes.reduce(function (accumulator, escape) {\\n        return accumulator.replace(escape[0], escape[1])\\n      }, string)\\n    }\\n  };\\n\\n  /**\\n   * Reduces a DOM node down to its Markdown string equivalent\\n   * @private\\n   * @param {HTMLElement} parentNode The node to convert\\n   * @returns A Markdown representation of the node\\n   * @type String\\n   */\\n\\n  function process (parentNode) {\\n    var self = this;\\n    return reduce.call(parentNode.childNodes, function (output, node) {\\n      node = new Node(node, self.options);\\n\\n      var replacement = '';\\n      if (node.nodeType === 3) {\\n        replacement = node.isCode ? node.nodeValue : self.escape(node.nodeValue);\\n      } else if (node.nodeType === 1) {\\n        replacement = replacementForNode.call(self, node);\\n      }\\n\\n      return join(output, replacement)\\n    }, '')\\n  }\\n\\n  /**\\n   * Appends strings as each rule requires and trims the output\\n   * @private\\n   * @param {String} output The conversion output\\n   * @returns A trimmed version of the ouput\\n   * @type String\\n   */\\n\\n  function postProcess (output) {\\n    var self = this;\\n    this.rules.forEach(function (rule) {\\n      if (typeof rule.append === 'function') {\\n        output = join(output, rule.append(self.options));\\n      }\\n    });\\n\\n    return output.replace(/^[\\\\t\\\\r\\\\n]+/, '').replace(/[\\\\t\\\\r\\\\n\\\\s]+$/, '')\\n  }\\n\\n  /**\\n   * Converts an element node to its Markdown equivalent\\n   * @private\\n   * @param {HTMLElement} node The node to convert\\n   * @returns A Markdown representation of the node\\n   * @type String\\n   */\\n\\n  function replacementForNode (node) {\\n    var rule = this.rules.forNode(node);\\n    var content = process.call(this, node);\\n    var whitespace = node.flankingWhitespace;\\n    if (whitespace.leading || whitespace.trailing) content = content.trim();\\n    return (\\n      whitespace.leading +\\n      rule.replacement(content, node, this.options) +\\n      whitespace.trailing\\n    )\\n  }\\n\\n  /**\\n   * Joins replacement to the current output with appropriate number of new lines\\n   * @private\\n   * @param {String} output The current conversion output\\n   * @param {String} replacement The string to append to the output\\n   * @returns Joined output\\n   * @type String\\n   */\\n\\n  function join (output, replacement) {\\n    var s1 = trimTrailingNewlines(output);\\n    var s2 = trimLeadingNewlines(replacement);\\n    var nls = Math.max(output.length - s1.length, replacement.length - s2.length);\\n    var separator = '\\\\n\\\\n'.substring(0, nls);\\n\\n    return s1 + separator + s2\\n  }\\n\\n  /**\\n   * Determines whether an input can be converted\\n   * @private\\n   * @param {String|HTMLElement} input Describe this parameter\\n   * @returns Describe what it returns\\n   * @type String|Object|Array|Boolean|Number\\n   */\\n\\n  function canConvert (input) {\\n    return (\\n      input != null && (\\n        typeof input === 'string' ||\\n        (input.nodeType && (\\n          input.nodeType === 1 || input.nodeType === 9 || input.nodeType === 11\\n        ))\\n      )\\n    )\\n  }\\n\\n  return TurndownService;\\n\\n})));\",\n            \"type\": \"application/javascript\",\n            \"title\": \"$:/plugins/sq/typewriter/lib/turndown-browser-umd.js\",\n            \"module-type\": \"library\",\n            \"modified\": \"20211201003954377\"\n        }\n    }\n}"}